datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compoundId")
  userId             Int       @map(name: "userId")
  providerType       String    @map(name: "providerType")
  providerId         String    @map(name: "providerId")
  providerAccountId  String    @map(name: "providerAccountId")
  refreshToken       String?   @map(name: "refreshToken")
  accessToken        String?   @map(name: "accessToken")
  accessTokenExpires DateTime? @map(name: "accessTokenExpires")
  createdAt          DateTime  @default(now()) @map(name: "createdAt")
  updatedAt          DateTime  @default(now()) @map(name: "updatedAt")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "userId")
  expires      DateTime
  sessionToken String   @unique @map(name: "sessionToken")
  accessToken  String   @unique @map(name: "accessToken")
  createdAt    DateTime @default(now()) @map(name: "createdAt")
  updatedAt    DateTime @default(now()) @map(name: "updatedAt")

  @@map(name: "sessions")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String?      @unique
  password      String?
  name          String?
  emailVerified DateTime?    @map(name: "emailVerified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "createdAt")
  updatedAt     DateTime     @default(now()) @map(name: "updatedAt")
  submissions   Submission[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "createdAt")
  updatedAt  DateTime @default(now()) @map(name: "updatedAt")

  @@map(name: "verificationRequests")
}

model PuzzleType {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  puzzles   Puzzle[]

  @@map(name: "puzzle_types")
}

model Puzzle {
  id              Int          @id @default(autoincrement())
  name            String?      @unique
  createdAt       DateTime     @default(now()) @map(name: "created_at")
  updatedAt       DateTime     @updatedAt @map(name: "updated_at")
  difficulty      Difficulty   @default(EASY)
  content         String?
  imageUrl        String?      @map(name: "image_url")
  exampleContent  String?      @map(name: "example_content")
  exampleImageUrl String?      @map(name: "example_image_url")
  isGenerated     Boolean      @map(name: "is_generated")
  question        String
  hint            String
  published       Boolean      @default(false)
  variables       Json
  puzzleType      PuzzleType   @relation(fields: [puzzleTypeId], references: [id])
  puzzleTypeId    Int          @map(name: "puzzle_type_id")
  submissions     Submission[]

  @@map(name: "puzzles")
}

model Submission {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @updatedAt @map(name: "updated_at")
  puzzle     Puzzle    @relation(fields: [puzzleId], references: [id])
  puzzleId   Int       @map(name: "puzzle_id")
  user       User      @relation(fields: [userId], references: [id])
  userId     Int       @map(name: "user_id")
  answers    String[]
  isCorrect  Boolean[] @map(name: "is_correct")
  randomSeed Int[]     @map(name: "random_seed")

  @@map(name: "submissions")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
