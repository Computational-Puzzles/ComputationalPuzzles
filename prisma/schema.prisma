datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                       Int       @id @default(autoincrement())
  userId                   Int       @map(name: "userId")
  type                     String    @map(name: "type")
  provider                 String    @map(name: "provider")
  providerAccountId        String    @map(name: "providerAccountId")
  refresh_token            String?   @map(name: "refreshToken")
  refresh_token_expires_in Int?      @map(name: "refreshTokenExpiresIn")
  access_token             String?   @map(name: "accessToken")
  access_token_expires     DateTime? @map(name: "accessTokenExpires")
  expires_at               Int?      @map(name: "expiresAt")
  id_token                 String?   @map(name: "idToken")
  token_type               String?   @map(name: "tokenType")
  scope                    String?   @map(name: "scope")
  createdAt                DateTime  @default(now()) @map(name: "createdAt")
  updatedAt                DateTime  @default(now()) @map(name: "updatedAt")
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "userId")
  expires      DateTime
  sessionToken String   @unique @map(name: "sessionToken")
  accessToken  String   @unique @map(name: "accessToken")
  createdAt    DateTime @default(now()) @map(name: "createdAt")
  updatedAt    DateTime @default(now()) @map(name: "updatedAt")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String?      @unique
  password      String?
  name          String?
  emailVerified DateTime?    @map(name: "emailVerified")
  image         String?
  createdAt     DateTime     @default(now()) @map(name: "createdAt")
  updatedAt     DateTime     @default(now()) @map(name: "updatedAt")
  submissions   Submission[]
  Account       Account[]
  Session       Session[]

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "createdAt")
  updatedAt  DateTime @default(now()) @map(name: "updatedAt")

  @@unique([identifier, token])
  @@map(name: "verificationRequests")
}

model PuzzleType {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  puzzles   Puzzle[]

  @@map(name: "puzzle_types")
}

model Puzzle {
  id              Int              @id @default(autoincrement())
  name            String?          @unique
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
  difficulty      Difficulty       @default(EASY)
  content         String[]
  imageUrl        String?          @map(name: "image_url")
  exampleContent  String[]         @map(name: "example_content")
  exampleImageUrl String?          @map(name: "example_image_url")
  isGenerated     Boolean          @map(name: "is_generated")
  question        String
  inputType       InputType        @default(TEXT) @map(name: "input_type")
  published       Boolean          @default(false)
  variables       Json
  puzzleType      PuzzleType       @relation(fields: [puzzleTypeId], references: [id], onDelete: Cascade)
  puzzleTypeId    Int              @map(name: "puzzle_type_id")
  puzzleInstances PuzzleInstance[]

  @@map(name: "puzzles")
}

model PuzzleInstance {
  id          Int          @id @default(autoincrement())
  puzzle      Puzzle       @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  puzzleId    Int          @map(name: "puzzle_id")
  hint        String       @default("No hint")
  submissions Submission[]
  longitude   Float
  latitude    Float
  address     String

  @@map(name: "puzzle_instances")
}

model Submission {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  updatedAt        DateTime       @updatedAt @map(name: "updated_at")
  puzzleInstance   PuzzleInstance @relation(fields: [puzzleInstanceId], references: [id], onDelete: Cascade)
  puzzleInstanceId Int            @map(name: "puzzle_instance_id")
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int            @map(name: "user_id")
  answers          String[]
  isCorrect        Boolean[]      @map(name: "is_correct")
  randomSeed       Float[]        @map(name: "random_seed")

  @@unique([puzzleInstanceId, userId], map: "puzzleInstanceId_userId")
  @@map(name: "submissions")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum InputType {
  TEXT
  MCQ
}
